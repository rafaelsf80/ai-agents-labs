# 09 - Custom agent in DFCX
# The Custom agent feature allows for an arbitrary Agent definition to be used in place of a standard Agent definition.
# In the following example, we'll write a custom class DialogflowAgent which extends BaseAgent so we can make use of any arbitrary DFCX agent.
# To simplify the implementation, we're using go/scrapi.
# This specific DFCX agent in use is an Agent using Playbooks w/ an attached Datastore that is connected to the www.yeti.com website.
# !pip install dfcx-scrapi --quiet

GEMINI_2_FLASH = "gemini-2.0-flash"

from google.adk.agents.base_agent import BaseAgent
from google.adk.agents import Agent
from google.adk.sessions import Session
from google.adk.events import Event
from google.adk.agents.invocation_context import InvocationContext
from dfcx_scrapi.core.sessions import Sessions
from dfcx_scrapi.tools.agent_response import AgentResponse
from pydantic import Field, ConfigDict
from typing import AsyncGenerator
from pydantic import Field, ConfigDict

class DialogflowAgent(BaseAgent):
    agent_id: str = Field(...)
    name: str = Field(...)
    flow: str = Field(...)
    session_client: Sessions = Field(default=None, init_var=False)
    model_config = ConfigDict(arbitrary_types_allowed=True)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.session_client = Sessions(agent_id=self.agent_id)

    async def _run_async_impl(
        self, ctx: InvocationContext
        ) -> AsyncGenerator[Event, None]:
        """Core logic to run this agent via text-based conversaction.

        Args:
        ctx: InvocationContext, the invocation context for this agent.

        Yields:
        Event: the events generated by the agent.
        """
        text = None
        invocation_context = ctx.model_copy(update={"agent": self})

        if ctx.user_content.parts:
            first_part = ctx.user_content.parts[0]
            if hasattr(first_part, "text") and first_part.text:
                text = first_part.text

        session_id = f"{agent_id}/sessions/{invocation_context.session.id}"

        res = self.session_client.detect_intent(
            agent_id=self.agent_id,
            session_id=session_id,
            text=text
        )

        final_text = AgentResponse._extract_text(res)

        yield Event(
            invocation_id=invocation_context.invocation_id,
            author=self.name,
            content=Session.build_content(final_text)
        )

# FIXME: ADD YOUR DIALOGFLOW CX / CONVERSATIONAL AGENT ID HERE
agent_id = "projects/pmarlow-ccai-dev/locations/global/agents/dc5972f8-ad44-456b-9cee-87870f66c943" # Yeti
yeti_agent = DialogflowAgent(agent_id=agent_id, name="yeti_product_expert", flow="single")

root_agent = Agent(
    model=GEMINI_2_FLASH,
    name="target_agent",
    instruction="""
    You are a retail sales specialist for Target, the largest department store in the United States.
    Your job is to help users with general questions about products that you carry.
    The only exception is for YETI products.
    For YETI, you should call the yeti_product_expert agent.
    """,
    sub_agents=[yeti_agent]
)


# from agents.sessions.in_memory_session_service import InMemorySessionService
# from agents.artifacts.in_memory_artifact_service import InMemoryArtifactService
# from google.genai import types

# APP_NAME = "09-remote
# USER_ID = "rafa"

# session_service = InMemorySessionService()
# artifact_service = InMemoryArtifactService()
# runner = Runner(APP_NAME, root_agent, artifact_service, session_service)
# session = session_service.create(APP_NAME, USER_ID)

# # colors: https://stackoverflow.com/questions/58030468/how-to-have-colors-in-terminal-with-python-in-vscode
# def run_prompt(new_message: str):
#   content = types.Content(role='user', parts=[types.Part.from_text(text=new_message)])
#   for event in runner.run(
#       session=session,
#       new_message=content,
#   ):
#     if event.content:
#       parts = event.content.model_dump(exclude_none=True).get("parts")
#       for part in parts:
#           if part.get("text", None):
#               if event.content.role == "model":
#                   print(f"\033[32m[Agent {event.author}]\033[0m")  # green
#                   print(f"{part['text']}")
#               elif event.content.role == "user":
#                   print("\033[31mUser\033[0m")
#                   print(f"{part['text']}")

#           if part.get("function_call", None):
#               print("\033[34m[Tool]\033[0m") # blue
#               print(f"{part['function_call']}")

#           if part.get("function_response", None):
#               print("\033[33m[Tool result]\033[0m") # yellow
#               print(f"{part['function_response']}")


# run_prompt("Do you carry gift cards? if yes, what denominations?")

# run_prompt("what's the smallest YETI cup I can buy?")

# run_prompt("how many cans can I fit in the yeti 65?")

